{"version":3,"sources":["src/exchange.js","src/selection.js","sort.js"],"names":["bubble","quickSort","array","Array","isArray","update","i","length","j","temp","quickSortRecursive","start","end","left","right","run","console","log","selection","heap","exchange","a","b","minIndex","len","lastNode","Math","floor","maxHeap","maxIndex","parent","child","init","sorts","forEach","item","index","document","getElementById","addEventListener","value","result","window","textContent"],"mappings":"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","file":"91ba0003ec1b873fe6ca1e035988eb95.map","sourcesContent":["export function bubble(array) {\n    if (!Array.isArray(array)) {\n        return null;\n    }\n\n    //check for already sort\n    let update = 0;\n\n    for (let i = 0; i < array.length - 1; i++) {\n\n        //bubble the max value to bottom\n        for (let j = 0; j < array.length - 1 - i; j++) {\n            let temp;\n\n            if (array[j] > array[j + 1]) {\n\n                //exchange\n                temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n\n                update = 1;\n            }\n        }\n\n        if (!update) {\n            return array;\n        }\n    }\n\n    return array;\n}\n\nfunction quickSortRecursive(array, start, end) {\n    if (start >= end) {\n        return;\n    }\n\n    let temp = array[start];\n    let left = start, right = end;\n\n    while (left !== right) {\n        //right->mid\n        while (left < right && array[right] > temp) {\n            right--;\n        }\n        array[left] = array[right];\n\n        //left->mid\n        while (left < right && array[left] <= temp) {\n            left++;\n        }\n\n        array[right] = array[left];\n    }\n    // mid = left = right\n    array[left] = temp;\n\n    quickSortRecursive(array, start, left - 1);\n    quickSortRecursive(array, left + 1, end);\n\n    return array;\n}\n\nexport function quickSort(array) {\n    if (!Array.isArray(array)) {\n        return null;\n    }\n    return quickSortRecursive(array, 0, array.length - 1);\n}\n\nfunction run(array) {\n    console.log(bubble(array));\n    console.log(quickSort(array));\n}","function exchange(array, a, b) {\n    let temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}\n\nexport function selection(array) {\n    if (!Array.isArray(array)) {\n        return null;\n    }\n\n    // min\n    for (let i = 0; i < array.length - 1; i++) {\n        let minIndex = i;\n\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[j] < array[minIndex]) {\n                minIndex = j;\n            }\n        }\n\n        //exchange min value\n        exchange(array, i, minIndex);\n    }\n\n    return array;\n}\n\n/*\n Complete Binary Tree\n --------------------------------------------------\n             i (i=(1...n))        i (i=(0...n-1))\n           /  \\                 /  \\\n          /    \\          =>   /    \\\n        2i     2i+1           2i+1  2i+2\n --------------------------------------------------\n */\n\nexport function heap(array) {\n    if (!Array.isArray(array)) {\n        return null;\n    }\n\n    //init a max heap\n    let len = array.length;\n    const lastNode = Math.floor(len / 2) - 1;\n\n    for (let i = lastNode; i >= 0; i--) {\n        maxHeap(array, i, len);//len - 1\n    }\n\n    //put max to bottom\n    let maxIndex = len-1;\n    for (let j = maxIndex; j > 0; j--) {\n        exchange(array, 0, j);\n        maxHeap(array, 0, j);\n    }\n\n    return array;\n}\n\n/*\n start: the root of this node. left children and right children are all heap.\n end: checkout for child node exist, is leaf or not.\n  */\n\nfunction maxHeap(array, start, end) {\n    let parent = start;\n    let child = 2 * parent + 1;\n\n    // is leaf\n    if (child >= end) {\n        return ;\n    }\n\n    if (child + 1 < end && array[child] < array[child + 1]) {\n        child++;\n    }\n\n    //exchange\n    if(array[parent] < array[child]) {\n        exchange(array, parent, child);\n        maxHeap(array, child, end);\n    }\n\n    return array;\n}\n\nfunction run(array) {\n    // console.log(selection(array));\n    console.log(heap(array));\n}\n\nconst a = [2, 3, 9, 78, 785, 545, 3, 3, 78, 5, 45];","import {bubble, quickSort} from './src/exchange';\nimport {selection, heap} from './src/selection';\n// import {insertion, shell} from 'src/insertion';\n// import {mergeBottomToTop, mergeTopToBottom} from 'src/merge';\n// import {radix} from 'src/distribution';\n\nfunction init() {\n    const sorts = ['bubble', 'quickSort', 'selection', 'heap'];\n\n    sorts.forEach(function (item, index) {\n        document.getElementById(item).addEventListener('click', function () {\n            const value = document.getElementById('input');\n            const result = window[item](value);\n\n            document.getElementById('result').textContent = result;\n        });\n    })\n}\n\ninit();"]}